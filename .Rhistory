sum(v)
mean(v)
round(v)
round(2.333123421)
round(2.333123421, digits = 2)
round(2.37777,3)
# Regular expression
#grepl function
text <- "Hi there, do you who your are voting for?"
text#grep function
grepl("voting", text)
grepl("dog", text)
#grep function
v <- c("a", "b", "c","d","d")
v
grepl("b",v)
grep("b",v)
grep("d",v)
grepl("hello", "hello world")
grep("a", c("b","a"))
Sys.Date()
today <- Sys.Date()
class(today)
c<- "1990-01-01"
class(c)
my.date <- as.Date(c)
class(my.date)
as.Date("Nov-03-1990")
as.Date(05-21-1991)
my.date <- as.Date("Nov-03-90")
my.date <- as.Date("Nov-03-90", format = "%b-%d-%y")
my.date
c<- "1990-01-01"
class(c)
my.date <- as.Date(c)
class(my.date)
as.Date("Nov-03-1990")
as.Date(05-21-1991)
my.date <- as.Date("Nov-03-90", format = "%b-%d-%y")
my.date
my.date <- as.Date("Nov-03-90",format = "%b-%d-%y")
my.date
my.date <- as.Date("Nov-03-90",format ="%b-%d-%y")
my.date
as.Date("June,01,2002", format="%B,%d,%Y")
as.Date("June,01,2002",format="%B,%d,%Y")
install.packages("dplyr")
installed.packages("nyclights13")
library(dplyr)
installed.packages("nycflights13")
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
head(flights)
summary(flights)
head(filter(flights,month==11,day==3,carrier=="AA"))
head(flights[flights$month == 1 & flights$day == 3 & flights$carrier == "AA",])
#slice (return to the position)
slice(flights, 1:10)
#arrange
head(arrange(flights,year,month,day,air_time))
head(arrange(flights,year,month,day,arr_time))
head(arrange(flights,year,month,day,desc(arr_time))
head(arrange(flights,year,month,day,desc(arr_time)))
head(arrange(flights,year,month,day,desc(arr_time)))
#Select function from data fames
head(select(flights,carrier))
head(select(flights,carrier, arr_time,month))
#rename function
head(rename(flights,airline_carrier = carrier))
#Distinct
distint(select(flights,carrier))
#Distinct
distinct(select(flights,carrier))
head(mutate(flights, new_col = arr_delay-dep_delay))
head(transmute(flights, new_col = arr_delay*dep_delay))
summarise(flight, avg_air_times=mean(air_time,na.rm = TRUE))
summarise(flights, avg_air_times=mean(air_time,na.rm = TRUE))
summarise(flights, total_time=sum(air_time,na.rm = TRUE))
#Sample_n
sample_n(flights,10)
sample_frac(flights,0.1)
#pipe operator
library(dplyr)
#Nesting
filter(df, mpg >20)
result <- arrange(sample_n(filter(df, mpg >20), size=5),desc(mpg))
print(result)
#Multiple assignments
a <- filter(df,mpg>20)
b <- sample_n(a,size=5)
resutl <- arrange(b, desc(mpg))
print(result)
#Data %<% op1 %<% op2 %<% op3
results <- df %<% filter(mpg>20) %<% sample_n(size=5) %<% arrange(desc(mpg))
#Data %>% op1 %>% op2 %>% op3
results <- df %>% filter(mpg>20) %>% sample_n(size=5) %>% arrange(desc(mpg))
print(result)
library(dplyr)
head(mtcars)
filter(mtcars, mpg>20,cyl>6)
filter(mtcars, mpg>20,cyl==6)
#Reorder the Data Frame by cyl first, then by descending wt.
head(arrange(mtcars,cyl,desc(wt)))
#Select the columns mpg and hp
select(mtcars,mpg,hp)
#Select the distinct values of the gear column.
distinct(mtcars,gear)
head(mutate(mtcars,performance))
#Create a new column called "Performance" which is calculated by hp divided by wt.
performance <- hp/wt
head(mutate(mtcars,performance))
#Create a new column called "Performance" which is calculated by hp divided by wt.
performance <- mtcars$hp/mtcars$wt
head(mutate(mtcars,performance))
#Find the mean mpg value using dplyr.
mean(mtcars$mpg)
#Use pipe operators to get the mean hp value for cars with 6 cylinders.
mtcars %>% filter(cyl==6) %>% summarise(avg_hp = mean(hp))
install.packages("tidyr")
install.packages("data.table")
library(tidyr)
library(data.table)
#gather
comp <- c(1,1,1,2,2,2,3,3,3)
yr <- c(1998, 1999, 2000, 1998, 2000, 1998, 1999, 2000)
q1 <- runif(9, min=0, max=100)
q2 <- runif(9, min=0. max=100)
q3 <- runif(9, min=0, max=100)
q4 <- runif(9, min=0, max=100)
df <- data.frame(comp=comp,year=yr,Qtr1=q1,Qtr2=q2,Qtr3=q3,Qtr4=q4)
q2 <- runif(9, min=0. max=100)
df <- data.frame(comp=comp,year=yr,Qtr1=q1,Qtr2=q2,Qtr3=q3,Qtr4=q4)
df <- data.frame(comp=comp,year=yr,Qtr1=q1,Qtr2=q2,Qtr3=q3,Qtr4=q4)
yr <- c(1998, 1999, 2000, 1998, 2000, 1998, 1999, 2000)
q1 <- runif(9, min=0, max=100)
q2 <- runif(9, min=0. max=100)
q3 <- runif(9, min=0, max=100)
q4 <- runif(9, min=0, max=100)
q2 <- runif(9, min=0, max=100)
df <- data.frame(comp=comp,year=yr,Qtr1=q1,Qtr2=q2,Qtr3=q3,Qtr4=q4)
df <- data.frame(comp=comp,year=yr,Qtr1 = q1,Qtr2 = q2,Qtr3 = q3,Qtr4 = q4)
installed.packages("ggplot2")
installed.packages("ggplot2movies")
library(ggplot2)
installed.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
installed.packages("ggplot2movies")
library(ggplot2movies)
colmanes(movies)
colnames(movies)
head(movies)
#DATA AESTHETICS
pl <- ggplot(movies,aes(x=rating))
#Geometry
print(pl + geom_histogram())
print(pl + geom_histogram(binwidth = 0.1))
print(pl + geom_histogram(binwidth = 0.1, color="red"))
print(pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink"))
print(pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink",alpha=0))
print(pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink",alpha=1))
print(pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink",alpha=0.4))
print(pl3)
pl4 <- (pl2 + xlab("Movie Rating") + ylab("My Count"))
print(pl4)
pl4 <- (pl2 + xlab("Movie Rating") + ylab("My Count"))
print(pl4)
pl4 <- (pl2 + xlab("Movie Rating") + ylab("My Count"))
#adding the labels
pl2 <- pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink",alpha=0.4)
pl4 <- (pl2 + xlab("Movie Rating") + ylab("My Count"))
print(pl4)
print(pl3 + ggtitle("My title"))
pl2 <- pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink",alpha=0.4)
pl3 <- (pl2 + xlab("Movie Rating") + ylab("Count"))
print(pl3 + ggtitle("My title"))
#fill with the range of the color
pl2 <- pl + geom_histogram(binwidth = 0.1, aes(fill=..count=..))
pl2 <- pl + geom_histogram(binwidth = 0.1, aes(fill=..count=..))
pl3 <- (pl2 + xlab("Movie Rating") + ylab("Count"))
print(pl3 + ggtitle("My title"))
#fill with the range of the color
pl2 <- pl + geom_histogram(binwidth = 0.1, aes(fill=..count=..))
pl3 <- (pl2 + xlab("Movie Rating") + ylab("Count"))
print(pl3 + ggtitle("My title"))
#fill with the range of the color
pl2 <- pl + geom_histogram(binwidth = 0.1, aes(fill=..count..))
pl3 <- (pl2 + xlab("Movie Rating") + ylab("Count"))
print(pl3 + ggtitle("My title"))
library(ggplot2)
library(ggplot2movies)
pl <- ggplot(movies,aes(x=year,Y=rating))
source('~/.active-rstudio-document', encoding = 'UTF-8')
print(pl + geom_bin2d())
library(ggplot2)
library(ggplot2movies)
pl <- ggplot(movies,aes(x=year,Y=rating))
print(pl + geom_bin2d())
print(pl + geom_bin2d())
library(ggplot2)
library(ggplot2movies)
pl <- ggplot(movies,aes(x=year,Y=rating))
print(pl + geom_bin2d())
pl <- ggplot(movies,aes(x=year,y=rating))
print(pl + geom_bin2d())
pl2 <- pl + geom_bind2d()
library(ggplot2)
library(ggplot2movies)
pl <- ggplot(movies,aes(x=year,y=rating))
print(pl + geom_bin2d())
pl2 <- pl + geom_bind2d()
pl2 <- pl + geom_bin2d()
print(pl2 + scale_fill_gradient(high="red", low="green"))
pl3 <- pl + geom_bin2d(binwidth=c(3,1))
print(pl3 + scale_fill_gradient(high="red", low="green"))
print(pl3 + scale_fill_gradient(high="red", low="blue"))
pl4 <- pl + geom_hex
pl4 <- pl + geom_hex()
print(pl4 + scale_fill_gradient(high="red", low="blue"))
install.packages("hexbin")
pl4 <- pl + geom_hex()
print(pl4 + scale_fill_gradient(high="red", low="blue"))
pl5 <- pl + geom_density2d()
print(pl5)
library(ggplot2)
ggplot2(mpg, aes(x=displ,y=hwy)) + geom_point()
pl <- ggplot2(mpg, aes(x=displ,y=hwy)) + geom_point()
pl <- ggplot(mpg, aes(x=displ,y=hwy)) + geom_point()
print(pl)
pl2 <- pl + coord_cartesian(xlim=c(1,4),ylim=c(15,30))
print(pl2)
pl3 <- pl + coord_fixef(ratio=1/3)
print(pl3)
pl3 <- pl + coord_fixed(ratio=1/3)
print(pl3)
#facet_grid
print(pl)
print(pl + facet_grid(. ~ cyl))
head(mpg)
#facet function will support to create the different graph of each sample
print(pl + facet_grid(drv ~ .))
print(pl + facet_grid(drv ~ cyl))
#themes
library(ggplot2)
pl <- ggplot(mtcars,aes(x=wt,y=mpg)) + geom_point()
print(pl)
theme_set(theme_minimal())
pl <- ggplot(mtcars,aes(x=wt,y=mpg)) + geom_point()
print(pl
pl <- ggplot(mtcars,aes(x=wt,y=mpg)) + geom_point()
print(pl)
print(pl + theme_dark())
install.packages("ggthemes")
library(ggthmes)
library(ggthemes)
print(pl + theme_economist())
library(ggplot2)
ggplot()library(ggthemes)
library(themes)
library(ggthemes)
head(mpg)
install.packages("plotly")
# get the data
pwd
getwd()
ls
cd C:\\Users\\leh\\Documents\\DataScienceAndML
cd \\Users\\leh\\Documents\\DataScienceAndML
cd \\Users\\leh\\Documents\\DataScienceAndML
cd C\\Users\\leh\\Documents\\DataScienceAndML
cd (C\\Users\\leh\\Documents\\DataScienceAndML)
df <- read.csv("student-mat.csv")
df <- read.csv("student-mat.csv")
df <- read.csv("student-mat.csv")
ls
ls
setwd("~/DataScienceAndML")
df.train <- read.csv("titanic_train.csv")
print(head(df.train))
print(" ")
print(str(df.train))
library(Amelia)
install.packages("Amelia")
install.packages("Amelia")
library(Amelia)
# missmap shows the missingness accours in the datasheet
missmap(df.train, main="Missing Map", col = c("yellow", "black"), legent = FALSE)
#Get the DataÂ¶
#Read in the adult_sal.csv file and set it to a data frame called adult.
adult <- read.csv("adult_sal.csv")
#Check the head of adult
head(adult)
#You should notice the index has been repeated. Drop this column.
library(dplyr)
adult <- select(adult,-X)
#Check the head,str, and summary of the data now.
head(adult)
str(adult)
summary(adult)
#type-employr column
# use table() to check the frequency of the type_employer column
table(adult$type_employer)
# Combine these two smallest groups into a single group called "Unemployed". There are lots of ways to do this, so feel free to get creative. Hint: It may be helpful to convert these objects into character data types (as.character() and then use sapply with a custom function)
unemp <- function(job){
job <- as.character(job)
if (job=='Never-worked' | job=='Without-pay'){
return('Unemployed')
}else{
return(job)
}
}
adult$type_employer <- sapply(adult$type_employer,unemp)
table(adult$type_employer)
#What other columns are suitable for combining? Combine State and Local gov jobs into a category called SL-gov and combine self-employed jobs into a category called self-emp.
SL <- function(job){
job <- as.character(job)
if (job=='Local-gov' | job=='State-gov'){
return('SL-gov')
}else{
return(job)
}
}
Self <- function(job){
job <- as.character(job)
if (job=='Self-emp-inc' | job=='Self-emp-not-inc'){
return('Self-emp')
}else{
return(job)
}
}
adult$type_employer <- sapply(adult$type_employer,SL)
adult$type_employer <- sapply(adult$type_employer,Self)
table(adult$type_employe)
#Marital Column
#Use table() to look at the marital column
table(adult$marital)
# reduce this to three groups: Married, noit married, never married
group_marital <- function(mar){
mar <- as.character(mar)
# Not-Married
if (mar=='Separated' | mar=='Divorced' | mar=='Widowed'){
return('Not-Married')
# Never-Married
}else if(mar=='Never-married'){
return(mar)
#Married
}else{
return('Married')
}
}
adult$marital <- sapply(adult$marital,group_marital)
table(adult$marital)
####Country column
# check the country column using table()
table(adult$country)
#Group these countries together however you see fit. You have flexibility here because there is no right/wrong way to do this, possibly group by continents. You should be able to reduce the number of groups here significantly though.
levels(adult$Country)
#Group these countries together however you see fit. You have flexibility here because there is no right/wrong way to do this, possibly group by continents. You should be able to reduce the number of groups here significantly though.
levels(adult$country)
#Group these countries together however you see fit. You have flexibility here because there is no right/wrong way to do this, possibly group by continents. You should be able to reduce the number of groups here significantly though.
levels(adult$country)
Other <- c('South')
Asia <- c('China','Hong','India','Iran','Cambodia','Japan', 'Laos' ,
'Philippines' ,'Vietnam' ,'Taiwan', 'Thailand')
North.America <- c('Canada','United-States','Puerto-Rico' )
Europe <- c('England' ,'France', 'Germany' ,'Greece','Holand-Netherlands','Hungary',
'Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia')
Latin.and.South.America <- c('Columbia','Cuba','Dominican-Republic','Ecuador',
'El-Salvador','Guatemala','Haiti','Honduras',
'Mexico','Nicaragua','Outlying-US(Guam-USVI-etc)','Peru',
'Jamaica','Trinadad&Tobago')
Other <- c('South')
group_country <- function(ctry){
if (ctry %in% Asia){
return('Asia')
}else if (ctry %in% North.America){
return('North.America')
}else if (ctry %in% Europe){
return('Europe')
}else if (ctry %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
adult$country <- sapply(adult$country,group_country)
# use table() to confirm the groupings
table(adult$country)
#Check the str() of adult again. Make sure any of the columns we changed have factor levels with factor()
str(adult)
adult$type_employer <- factor(adult$type_employer)
strc(adult)
str(adult)
library(Amelia)
#Convert any cell with a '?' or a ' ?' value to a NA value. Hint: is.na() may be useful here or you can also use brackets with a conditional statement. Refer to the solutions if you can't figure this step out.
adult[adult == "?"] <- NA
#Using table() on a column with NA values should now not display those NA values, instead you'll just see 0 for ?. Optional: Refactor these columns (may take awhile). For example:
table(adult$type_employer)
adult$type_employer <- sapply(adult$type_employer,factor)
adult$country <- sapply(adult$country,factor)
adult$marital <- sapply(adult$marital,factor)
adult$occupation <- sapply(adult$occupation,factor)
adult$type_employer <- sapply(adult$type_employer,factor)
adult$country <- sapply(adult$country,factor)
adult$marital <- sapply(adult$marital,factor)
adult$occupation <- sapply(adult$occupation,factor)
# Find the missing data through the map
missing(adult)
missmap(adult)
#You should have noticed that using missmap(adult) is bascially a heatmap pointing out missing values (NA). This gives you a quick glance at how much data is missing, in this case, not a whole lot (relatively speaking). You probably also noticed that there is a bunch of y labels, get rid of them by running the command below. What is col=c('yellow','black') doing?
missmap(adult,y.at=c(1),y.labels = c(''),col=c('yellow','black'))
#Use na.omit() to omit NA data from the adult data frame. Note, it really depends on the situation and your data to judge whether or not this is a good decision. You shouldn't always just drop NA values.
adult <- na.omit(adult)
#Use missmap() to check that all the NA values were in fact dropped.
missmap(adult,y.at=c(1),y.labels = c(''),col=c('yellow','black'))
###EDA
#Although we have cleaned the data, we still have explored it using visualization
#Check the str() of the data
str(adult)
#Use ggplot2 to create a histogram of ages, colored by income
library(ggpl2)
library(dplyr)
#Use ggplot2 to create a histogram of ages, colored by income
library(ggplot2)
ggplot(adult, aes(ages)) + geom_histogram(aes(fill=income), color="black",binwith=1) + theme_bw()
ggplot(adult, aes(ages)) + geom_histogram(aes(fill=income), color="black",binwidth=1) + theme_bw()
ggplot(adult, aes(age)) + geom_histogram(aes(fill=income), color="black",binwidth=1) + theme_bw()
#Plot the histogram of hourse worked per week
ggplot(adult, aes(hr_per_week)) + geom_histogram() + them_bw()
#Plot the histogram of hourse worked per week
ggplot(adult, aes(hr_per_week)) + geom_histogram() + theme_bw()
#Rename the country column to region column to better reflect the factor levels
names(adult)[names(adult) =="country"] <- "region"
str(adult)
#Creat a barplot of region with fill color defined by income class. Optinal: figure out how rotate teh x axis test for readability
ggplot(adult,aes(region)) + geom_barplot(aes(fill="income"), color="yellow") + theme_bw()
#Creat a barplot of region with fill color defined by income class. Optinal: figure out how rotate teh x axis test for readability
ggplot(adult,aes(region)) + geom_bar(aes(fill="income"), color="yellow") + theme_bw()
#Creat a barplot of region with fill color defined by income class. Optinal: figure out how rotate teh x axis test for readability
pl <- ggplot(adult,aes(region)) + geom_bar(aes(fill="income"), color="yellow") + theme_bw()
print(pl)
pl2 <- pl + theme(axis.text.x =element_text(angle = 90, hjust =1))
print(pl2)
#Creat a barplot of region with fill color defined by income class. Optinal: figure out how rotate teh x axis test for readability
pl <- ggplot(adult,aes(region)) + geom_bar(aes(fill="income"), color="yellow") + theme_bw()
print(pl)
pl2 <- pl + theme(axis.text.x =element_text(angle = 90, hjust =1))
print(pl2)
#BUILDING A MODEL
#Now it is time to build a model to classify people into two groups: Above or below 50k in salary
####LOGISTIC REGRESSION
#ogistic Regression is a type of classification model. In classification models, we attempt to predict the outcome of categorical dependent variables, using one or more independent variables. The independent variables can be either categorical or numerical.
#take a quick look at the head of adult to make sure we have a good overview before going into building the model
head(adult)
###TRAIN TEST SPLIT
#Split the data in a train and test set using the caTools library as done in previous lectures. refrence previous solution motebooks if you need a refresher
library(caTools) #Import library
set.seed(101) # set a random see so your "random" results are the same as this notebook
#split up the sample, basically randomly assigns a booleans to a new column "sample"
sample <- sample.split(adult$income, SplitRatio=0.07)
#training data
train = subset(adult, sample == TRUE)
#testing data
test = subset(adult, sample == FALSE)
## TRAINING THE MODEL
#Explore the glm() function with help(glm). Read through the documentation
help(glm)
#Use all the features to train a glm() model on the training data set, pass the argument family=binomial(logit) into the glm function.
model 0 glm(incom ~., family = binomial(logit), data = train)
#Check the model summary
summary(model)
#Use all the features to train a glm() model on the training data set, pass the argument family=binomial(logit) into the glm function.
model = glm(incom ~., family = binomial(logit), data = train)
#Check the model summary
summary(model)
#Use all the features to train a glm() model on the training data set, pass the argument family=binomial(logit) into the glm function.
model = glm(income ~ ., family = binomial(logit), data = train)
#Check the model summary
summary(model)
#Check the model summary
summary(model)
#Use all the features to train a glm() model on the training data set, pass the argument family=binomial(logit) into the glm function.
model <- glm(income ~ ., family = binomial(logit), data = train) #Call:glm(formula = income ~ ., family = binomial(logit), data = train)
###TRAIN TEST SPLIT
#Split the data in a train and test set using the caTools library as done in previous lectures. refrence previous solution motebooks if you need a refresher
library(caTools) #Import library
set.seed(101) # set a random see so your "random" results are the same as this notebook
#split up the sample, basically randomly assigns a booleans to a new column "sample" # SplitRation = percent of sample == TRUE
sample <- sample.split(adult$income, SplitRatio=0.07)
#training data
train = subset(adult, sample == TRUE)
#testing data
test = subset(adult, sample == FALSE)
library(glm)
## TRAINING THE MODEL
#Explore the glm() function with help(glm). Read through the documentation
help(glm)
#Use all the features to train a glm() model on the training data set, pass the argument family=binomial(logit) into the glm function.
model <- glm(income ~ ., family = binomial(logit), data = train) #Call:glm(formula = income ~ ., family = binomial(logit), data = train)
#Use all the features to train a glm() model on the training data set, pass the argument family=binomial(logit) into the glm function.
model <- glm(income ~ ., family = binomial(logit), x=FALSE, y = TRUE, data = train) #Call:glm(formula = income ~ ., family = binomial(logit), data = train)
#Check the model summary
summary(model)
#Use all the features to train a glm() model on the training data set, pass the argument family=binomial(logit) into the glm function.
model <- glm(income ~ ., family = binomial(link = "logit"), data = train) #Call:glm(formula = income ~ ., family = binomial(logit), data = train)
#Check the model summary
summary(model)
#Use all the features to train a glm() model on the training data set, pass the argument family=binomial(logit) into the glm function.
log.model <- glm(income ~ ., family = binomial(link = "logit"), data = train) #Call:glm(formula = income ~ ., family = binomial(logit), data = train)
#Check the model summary
summary(model)
